import React, { useState } from 'react';\nimport { Sun, Moon, Monitor, Settings, Type, Eye, EyeOff, Zap, ZapOff } from 'lucide-react';\nimport { useTheme } from '../context/ThemeContext';\n\nconst ThemeToggle = ({ showFullControls = false }) => {\n  const {\n    theme,\n    fontSize,\n    reducedMotion,\n    highContrast,\n    setTheme,\n    toggleTheme,\n    setFontSize,\n    increaseFontSize,\n    decreaseFontSize,\n    setReducedMotion,\n    setHighContrast,\n    resetPreferences,\n    themes,\n    fontSizes,\n    isDark,\n    isLight,\n    isSystem\n  } = useTheme();\n\n  const [showSettings, setShowSettings] = useState(false);\n\n  const getThemeIcon = () => {\n    switch (theme) {\n      case 'light':\n        return <Sun className=\"w-4 h-4\" />;\n      case 'dark':\n        return <Moon className=\"w-4 h-4\" />;\n      case 'system':\n        return <Monitor className=\"w-4 h-4\" />;\n      default:\n        return <Sun className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getThemeLabel = () => {\n    return themes[theme]?.name || 'Light';\n  };\n\n  if (!showFullControls) {\n    // Simple toggle button\n    return (\n      <button\n        onClick={toggleTheme}\n        className=\"btn btn-ghost p-2\"\n        title={`Current theme: ${getThemeLabel()}. Click to cycle themes.`}\n        aria-label={`Switch theme. Current: ${getThemeLabel()}`}\n      >\n        {getThemeIcon()}\n      </button>\n    );\n  }\n\n  // Full theme controls panel\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setShowSettings(!showSettings)}\n        className=\"btn btn-ghost p-2\"\n        title=\"Theme and accessibility settings\"\n        aria-label=\"Open theme settings\"\n        aria-expanded={showSettings}\n      >\n        <Settings className=\"w-4 h-4\" />\n      </button>\n\n      {showSettings && (\n        <div className=\"absolute right-0 top-full mt-2 w-80 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-xl shadow-xl z-50 p-6\">\n          <div className=\"space-y-6\">\n            {/* Theme Selection */}\n            <div>\n              <h3 className=\"font-semibold text-sm text-neutral-700 dark:text-neutral-300 mb-3\">\n                Theme\n              </h3>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {Object.entries(themes).map(([key, themeData]) => {\n                  const isActive = theme === key;\n                  const Icon = key === 'light' ? Sun : key === 'dark' ? Moon : Monitor;\n                  \n                  return (\n                    <button\n                      key={key}\n                      onClick={() => setTheme(key)}\n                      className={`\n                        flex flex-col items-center gap-2 p-3 rounded-lg border-2 transition-all\n                        ${\n                          isActive\n                            ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'\n                            : 'border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-600'\n                        }\n                      `}\n                      aria-pressed={isActive}\n                    >\n                      <Icon className={`w-5 h-5 ${\n                        isActive ? 'text-primary-600 dark:text-primary-400' : 'text-neutral-500'\n                      }`} />\n                      <span className={`text-xs font-medium ${\n                        isActive ? 'text-primary-600 dark:text-primary-400' : 'text-neutral-600 dark:text-neutral-400'\n                      }`}>\n                        {themeData.name}\n                      </span>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Font Size */}\n            <div>\n              <h3 className=\"font-semibold text-sm text-neutral-700 dark:text-neutral-300 mb-3\">\n                Font Size\n              </h3>\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={decreaseFontSize}\n                  className=\"btn btn-ghost p-2\"\n                  disabled={fontSize === 'small'}\n                  title=\"Decrease font size\"\n                >\n                  <Type className=\"w-3 h-3\" />\n                </button>\n                \n                <div className=\"flex-1\">\n                  <select\n                    value={fontSize}\n                    onChange={(e) => setFontSize(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-neutral-200 dark:border-neutral-700 rounded-lg bg-white dark:bg-neutral-800 text-sm\"\n                  >\n                    {Object.entries(fontSizes).map(([key, sizeData]) => (\n                      <option key={key} value={key}>\n                        {sizeData.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                \n                <button\n                  onClick={increaseFontSize}\n                  className=\"btn btn-ghost p-2\"\n                  disabled={fontSize === 'xlarge'}\n                  title=\"Increase font size\"\n                >\n                  <Type className=\"w-5 h-5\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Accessibility Options */}\n            <div>\n              <h3 className=\"font-semibold text-sm text-neutral-700 dark:text-neutral-300 mb-3\">\n                Accessibility\n              </h3>\n              <div className=\"space-y-3\">\n                {/* Reduced Motion */}\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={reducedMotion}\n                    onChange={(e) => setReducedMotion(e.target.checked)}\n                    className=\"sr-only\"\n                  />\n                  <div className={`\n                    flex items-center justify-center w-10 h-6 rounded-full transition-colors\n                    ${reducedMotion ? 'bg-primary-500' : 'bg-neutral-300 dark:bg-neutral-600'}\n                  `}>\n                    <div className={`\n                      w-4 h-4 bg-white rounded-full transition-transform flex items-center justify-center\n                      ${reducedMotion ? 'translate-x-2' : '-translate-x-2'}\n                    `}>\n                      {reducedMotion ? (\n                        <ZapOff className=\"w-2 h-2 text-primary-500\" />\n                      ) : (\n                        <Zap className=\"w-2 h-2 text-neutral-500\" />\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300\">\n                      Reduce Motion\n                    </div>\n                    <div className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n                      Minimize animations and transitions\n                    </div>\n                  </div>\n                </label>\n\n                {/* High Contrast */}\n                <label className=\"flex items-center gap-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={highContrast}\n                    onChange={(e) => setHighContrast(e.target.checked)}\n                    className=\"sr-only\"\n                  />\n                  <div className={`\n                    flex items-center justify-center w-10 h-6 rounded-full transition-colors\n                    ${highContrast ? 'bg-primary-500' : 'bg-neutral-300 dark:bg-neutral-600'}\n                  `}>\n                    <div className={`\n                      w-4 h-4 bg-white rounded-full transition-transform flex items-center justify-center\n                      ${highContrast ? 'translate-x-2' : '-translate-x-2'}\n                    `}>\n                      {highContrast ? (\n                        <Eye className=\"w-2 h-2 text-primary-500\" />\n                      ) : (\n                        <EyeOff className=\"w-2 h-2 text-neutral-500\" />\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium text-neutral-700 dark:text-neutral-300\">\n                      High Contrast\n                    </div>\n                    <div className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n                      Increase contrast for better visibility\n                    </div>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n            {/* Reset Button */}\n            <div className=\"pt-3 border-t border-neutral-200 dark:border-neutral-700\">\n              <button\n                onClick={() => {\n                  resetPreferences();\n                  setShowSettings(false);\n                }}\n                className=\"w-full btn btn-secondary text-sm\"\n              >\n                Reset to Defaults\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Backdrop */}\n      {showSettings && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setShowSettings(false)}\n          aria-hidden=\"true\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ThemeToggle;